/* automatically generated by rust-bindgen 0.69.4 */

pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_off_t = __int64_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MAPIPropertyTagList {
    pub id: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_MAPIPropertyTagList() {
    const UNINIT: ::std::mem::MaybeUninit<MAPIPropertyTagList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MAPIPropertyTagList>(),
        132usize,
        concat!("Size of: ", stringify!(MAPIPropertyTagList))
    );
    assert_eq!(
        ::std::mem::align_of::<MAPIPropertyTagList>(),
        4usize,
        concat!("Alignment of ", stringify!(MAPIPropertyTagList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIPropertyTagList),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIPropertyTagList),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct renddata {
    pub atyp: ::std::os::raw::c_ushort,
    pub ulPosition: ::std::os::raw::c_uint,
    pub dxWidth: ::std::os::raw::c_ushort,
    pub dyHeight: ::std::os::raw::c_ushort,
    pub dwFlags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_renddata() {
    const UNINIT: ::std::mem::MaybeUninit<renddata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<renddata>(),
        16usize,
        concat!("Size of: ", stringify!(renddata))
    );
    assert_eq!(
        ::std::mem::align_of::<renddata>(),
        4usize,
        concat!("Alignment of ", stringify!(renddata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atyp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(atyp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPosition) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(ulPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dxWidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(dxWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dyHeight) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(dyHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwFlags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(dwFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtr {
    pub wYear: ::std::os::raw::c_ushort,
    pub wMonth: ::std::os::raw::c_ushort,
    pub wDay: ::std::os::raw::c_ushort,
    pub wHour: ::std::os::raw::c_ushort,
    pub wMinute: ::std::os::raw::c_ushort,
    pub wSecond: ::std::os::raw::c_ushort,
    pub wDayOfWeek: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_dtr() {
    const UNINIT: ::std::mem::MaybeUninit<dtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dtr>(),
        14usize,
        concat!("Size of: ", stringify!(dtr))
    );
    assert_eq!(
        ::std::mem::align_of::<dtr>(),
        2usize,
        concat!("Alignment of ", stringify!(dtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wYear) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wYear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wMonth) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wMonth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wDay) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(dtr), "::", stringify!(wDay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wHour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wHour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wMinute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wMinute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wSecond) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wSecond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wDayOfWeek) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wDayOfWeek)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct variableLength {
    pub data: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_variableLength() {
    const UNINIT: ::std::mem::MaybeUninit<variableLength> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<variableLength>(),
        16usize,
        concat!("Size of: ", stringify!(variableLength))
    );
    assert_eq!(
        ::std::mem::align_of::<variableLength>(),
        8usize,
        concat!("Alignment of ", stringify!(variableLength))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(variableLength),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(variableLength),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MAPIProperty {
    pub custom: ::std::os::raw::c_uint,
    pub guid: [::std::os::raw::c_uchar; 16usize],
    pub id: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub namedproperty: ::std::os::raw::c_int,
    pub propnames: *mut variableLength,
    pub data: *mut variableLength,
}
#[test]
fn bindgen_test_layout_MAPIProperty() {
    const UNINIT: ::std::mem::MaybeUninit<MAPIProperty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MAPIProperty>(),
        48usize,
        concat!("Size of: ", stringify!(MAPIProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<MAPIProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(MAPIProperty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namedproperty) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(namedproperty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propnames) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(propnames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MAPIProps {
    pub count: ::std::os::raw::c_uint,
    pub properties: *mut MAPIProperty,
}
#[test]
fn bindgen_test_layout_MAPIProps() {
    const UNINIT: ::std::mem::MaybeUninit<MAPIProps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MAPIProps>(),
        16usize,
        concat!("Size of: ", stringify!(MAPIProps))
    );
    assert_eq!(
        ::std::mem::align_of::<MAPIProps>(),
        8usize,
        concat!("Alignment of ", stringify!(MAPIProps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProps),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProps),
            "::",
            stringify!(properties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Attachment {
    pub Date: dtr,
    pub Title: variableLength,
    pub MetaFile: variableLength,
    pub CreateDate: dtr,
    pub ModifyDate: dtr,
    pub TransportFilename: variableLength,
    pub RenderData: renddata,
    pub MAPI: MAPIProps,
    pub next: *mut Attachment,
    pub FileData: variableLength,
    pub IconData: variableLength,
}
#[test]
fn bindgen_test_layout_Attachment() {
    const UNINIT: ::std::mem::MaybeUninit<Attachment> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Attachment>(),
        168usize,
        concat!("Size of: ", stringify!(Attachment))
    );
    assert_eq!(
        ::std::mem::align_of::<Attachment>(),
        8usize,
        concat!("Alignment of ", stringify!(Attachment))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(Date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Title) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(Title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MetaFile) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(MetaFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateDate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(CreateDate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ModifyDate) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(ModifyDate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransportFilename) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(TransportFilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RenderData) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(RenderData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MAPI) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(MAPI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FileData) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(FileData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IconData) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(IconData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TNEFIOStruct {
    pub InitProc: ::std::option::Option<
        unsafe extern "C" fn(IO: *mut _TNEFIOStruct) -> ::std::os::raw::c_int,
    >,
    pub ReadProc: ::std::option::Option<
        unsafe extern "C" fn(
            IO: *mut _TNEFIOStruct,
            size: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            dest: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub CloseProc: ::std::option::Option<
        unsafe extern "C" fn(IO: *mut _TNEFIOStruct) -> ::std::os::raw::c_int,
    >,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__TNEFIOStruct() {
    const UNINIT: ::std::mem::MaybeUninit<_TNEFIOStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_TNEFIOStruct>(),
        32usize,
        concat!("Size of: ", stringify!(_TNEFIOStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<_TNEFIOStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(_TNEFIOStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InitProc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(InitProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(ReadProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CloseProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(CloseProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(data)
        )
    );
}
pub type TNEFIOStruct = _TNEFIOStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TNEFFileInfo {
    pub filename: *mut ::std::os::raw::c_char,
    pub fptr: *mut FILE,
    pub Debug: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TNEFFileInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TNEFFileInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TNEFFileInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TNEFFileInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFFileInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFFileInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFFileInfo),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFFileInfo),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Debug) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFFileInfo),
            "::",
            stringify!(Debug)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TNEFMemInfo {
    pub dataStart: *mut ::std::os::raw::c_uchar,
    pub ptr: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_long,
    pub Debug: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TNEFMemInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TNEFMemInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TNEFMemInfo>(),
        32usize,
        concat!("Size of: ", stringify!(TNEFMemInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFMemInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFMemInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataStart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(dataStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Debug) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(Debug)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TNEFStruct {
    pub version: [::std::os::raw::c_char; 16usize],
    pub from: variableLength,
    pub subject: variableLength,
    pub dateSent: dtr,
    pub dateReceived: dtr,
    pub messageStatus: [::std::os::raw::c_char; 10usize],
    pub messageClass: [::std::os::raw::c_char; 50usize],
    pub messageID: [::std::os::raw::c_char; 50usize],
    pub parentID: [::std::os::raw::c_char; 50usize],
    pub conversationID: [::std::os::raw::c_char; 50usize],
    pub body: variableLength,
    pub priority: [::std::os::raw::c_char; 10usize],
    pub starting_attach: Attachment,
    pub dateModified: dtr,
    pub MapiProperties: MAPIProps,
    pub CodePage: variableLength,
    pub OriginalMessageClass: variableLength,
    pub Owner: variableLength,
    pub SentFor: variableLength,
    pub Delegate: variableLength,
    pub DateStart: dtr,
    pub DateEnd: dtr,
    pub AidOwner: variableLength,
    pub RequestRes: ::std::os::raw::c_int,
    pub Debug: ::std::os::raw::c_int,
    pub IO: TNEFIOStruct,
    pub attachmentSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TNEFStruct() {
    const UNINIT: ::std::mem::MaybeUninit<TNEFStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TNEFStruct>(),
        696usize,
        concat!("Size of: ", stringify!(TNEFStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subject) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dateSent) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(dateSent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dateReceived) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(dateReceived)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageStatus) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(messageStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageClass) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(messageClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageID) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(messageID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentID) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(parentID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conversationID) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(conversationID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).starting_attach) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(starting_attach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dateModified) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(dateModified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MapiProperties) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(MapiProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CodePage) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(CodePage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OriginalMessageClass) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(OriginalMessageClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Owner) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(Owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SentFor) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(SentFor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Delegate) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(Delegate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DateStart) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(DateStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DateEnd) as usize - ptr as usize },
        614usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(DateEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AidOwner) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(AidOwner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestRes) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(RequestRes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Debug) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(Debug)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IO) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(IO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentSize) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(attachmentSize)
        )
    );
}
extern "C" {
    pub fn SwapDWord(
        p: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SwapWord(
        p: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn TNEFInitMapi(p: *mut MAPIProps);
}
extern "C" {
    pub fn TNEFInitAttachment(p: *mut Attachment);
}
extern "C" {
    pub fn TNEFInitialize(TNEF: *mut TNEFStruct);
}
extern "C" {
    pub fn TNEFFree(TNEF: *mut TNEFStruct);
}
extern "C" {
    pub fn TNEFFreeAttachment(p: *mut Attachment);
}
extern "C" {
    pub fn TNEFCheckForSignature(sig: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TNEFParseMemory(
        memory: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_long,
        TNEF: *mut TNEFStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TNEFParseFile(
        filename: *mut ::std::os::raw::c_char,
        TNEF: *mut TNEFStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TNEFParse(TNEF: *mut TNEFStruct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MAPIFindUserProp(p: *mut MAPIProps, ID: ::std::os::raw::c_uint) -> *mut variableLength;
}
extern "C" {
    pub fn MAPIFindProperty(p: *mut MAPIProps, ID: ::std::os::raw::c_uint) -> *mut variableLength;
}
extern "C" {
    pub fn MAPISysTimetoDTR(
        data: *mut ::std::os::raw::c_uchar,
        thedate: *mut dtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MAPIPrint(p: *mut MAPIProps);
}
extern "C" {
    pub fn TNEFPrintDate(Date: dtr);
}
extern "C" {
    pub fn SwapDDWord(
        p: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TNEFHandler {
    pub id: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 40usize],
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(
            TNEF: *mut TNEFStruct,
            id: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_TNEFHandler() {
    const UNINIT: ::std::mem::MaybeUninit<TNEFHandler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TNEFHandler>(),
        56usize,
        concat!("Size of: ", stringify!(TNEFHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFHandler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFHandler),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFHandler),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFHandler),
            "::",
            stringify!(handler)
        )
    );
}
