/* automatically generated by rust-bindgen */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 29;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const MV_FLAG: u32 = 4096;
pub const PROP_ID_NULL: u32 = 0;
pub const PROP_ID_INVALID: u32 = 65535;
pub const PR_ACKNOWLEDGEMENT_MODE: u32 = 1;
pub const PR_ALTERNATE_RECIPIENT_ALLOWED: u32 = 2;
pub const PR_AUTHORIZING_USERS: u32 = 3;
pub const PR_AUTO_FORWARD_COMMENT: u32 = 4;
pub const PR_AUTO_FORWARDED: u32 = 5;
pub const PR_CONTENT_CONFIDENTIALITY_ALGORITHM_ID: u32 = 6;
pub const PR_CONTENT_CORRELATOR: u32 = 7;
pub const PR_CONTENT_IDENTIFIER: u32 = 8;
pub const PR_CONTENT_LENGTH: u32 = 9;
pub const PR_CONTENT_RETURN_REQUESTED: u32 = 10;
pub const PR_CONVERSATION_KEY: u32 = 11;
pub const PR_CONVERSION_EITS: u32 = 12;
pub const PR_CONVERSION_WITH_LOSS_PROHIBITED: u32 = 13;
pub const PR_CONVERTED_EITS: u32 = 14;
pub const PR_DEFERRED_DELIVERY_TIME: u32 = 15;
pub const PR_DELIVER_TIME: u32 = 16;
pub const PR_DISCARD_REASON: u32 = 17;
pub const PR_DISCLOSURE_OF_RECIPIENTS: u32 = 18;
pub const PR_DL_EXPANSION_HISTORY: u32 = 19;
pub const PR_DL_EXPANSION_PROHIBITED: u32 = 20;
pub const PR_EXPIRY_TIME: u32 = 21;
pub const PR_IMPLICIT_CONVERSION_PROHIBITED: u32 = 22;
pub const PR_IMPORTANCE: u32 = 23;
pub const PR_IPM_ID: u32 = 24;
pub const PR_LATEST_DELIVERY_TIME: u32 = 25;
pub const PR_MESSAGE_CLASS: u32 = 26;
pub const PR_MESSAGE_DELIVERY_ID: u32 = 27;
pub const PR_MESSAGE_SECURITY_LABEL: u32 = 30;
pub const PR_OBSOLETED_IPMS: u32 = 31;
pub const PR_ORIGINALLY_INTENDED_RECIPIENT_NAME: u32 = 32;
pub const PR_ORIGINAL_EITS: u32 = 33;
pub const PR_ORIGINATOR_CERTIFICATE: u32 = 34;
pub const PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED: u32 = 35;
pub const PR_ORIGINATOR_RETURN_ADDRESS: u32 = 36;
pub const PR_PARENT_KEY: u32 = 37;
pub const PR_PRIORITY: u32 = 38;
pub const PR_ORIGIN_CHECK: u32 = 39;
pub const PR_PROOF_OF_SUBMISSION_REQUESTED: u32 = 40;
pub const PR_READ_RECEIPT_REQUESTED: u32 = 41;
pub const PR_RECEIPT_TIME: u32 = 42;
pub const PR_RECIPIENT_REASSIGNMENT_PROHIBITED: u32 = 43;
pub const PR_REDIRECTION_HISTORY: u32 = 44;
pub const PR_RELATED_IPMS: u32 = 45;
pub const PR_ORIGINAL_SENSITIVITY: u32 = 46;
pub const PR_LANGUAGES: u32 = 47;
pub const PR_REPLY_TIME: u32 = 48;
pub const PR_REPORT_TAG: u32 = 49;
pub const PR_REPORT_TIME: u32 = 50;
pub const PR_RETURNED_IPM: u32 = 51;
pub const PR_SECURITY: u32 = 52;
pub const PR_INCOMPLETE_COPY: u32 = 53;
pub const PR_SENSITIVITY: u32 = 54;
pub const PR_SUBJECT: u32 = 55;
pub const PR_SUBJECT_IPM: u32 = 56;
pub const PR_CLIENT_SUBMIT_TIME: u32 = 57;
pub const PR_REPORT_NAME: u32 = 58;
pub const PR_SENT_REPRESENTING_SEARCH_KEY: u32 = 59;
pub const PR_X400_CONTENT_TYPE: u32 = 60;
pub const PR_SUBJECT_PREFIX: u32 = 61;
pub const PR_NON_RECEIPT_REASON: u32 = 62;
pub const PR_RECEIVED_BY_ENTRYID: u32 = 63;
pub const PR_RECEIVED_BY_NAME: u32 = 64;
pub const PR_SENT_REPRESENTING_ENTRYID: u32 = 65;
pub const PR_SENT_REPRESENTING_NAME: u32 = 66;
pub const PR_RCVD_REPRESENTING_ENTRYID: u32 = 67;
pub const PR_RCVD_REPRESENTING_NAME: u32 = 68;
pub const PR_REPORT_ENTRYID: u32 = 69;
pub const PR_READ_RECEIPT_ENTRYID: u32 = 70;
pub const PR_MESSAGE_SUBMISSION_ID: u32 = 71;
pub const PR_PROVIDER_SUBMIT_TIME: u32 = 72;
pub const PR_ORIGINAL_SUBJECT: u32 = 73;
pub const PR_DISC_VAL: u32 = 74;
pub const PR_ORIG_MESSAGE_CLASS: u32 = 75;
pub const PR_ORIGINAL_AUTHOR_ENTRYID: u32 = 76;
pub const PR_ORIGINAL_AUTHOR_NAME: u32 = 77;
pub const PR_ORIGINAL_SUBMIT_TIME: u32 = 78;
pub const PR_REPLY_RECIPIENT_ENTRIES: u32 = 79;
pub const PR_REPLY_RECIPIENT_NAMES: u32 = 80;
pub const PR_RECEIVED_BY_SEARCH_KEY: u32 = 81;
pub const PR_RCVD_REPRESENTING_SEARCH_KEY: u32 = 82;
pub const PR_READ_RECEIPT_SEARCH_KEY: u32 = 83;
pub const PR_REPORT_SEARCH_KEY: u32 = 84;
pub const PR_ORIGINAL_DELIVERY_TIME: u32 = 85;
pub const PR_ORIGINAL_AUTHOR_SEARCH_KEY: u32 = 86;
pub const PR_MESSAGE_TO_ME: u32 = 87;
pub const PR_MESSAGE_CC_ME: u32 = 88;
pub const PR_MESSAGE_RECIP_ME: u32 = 89;
pub const PR_ORIGINAL_SENDER_NAME: u32 = 90;
pub const PR_ORIGINAL_SENDER_ENTRYID: u32 = 91;
pub const PR_ORIGINAL_SENDER_SEARCH_KEY: u32 = 92;
pub const PR_ORIGINAL_SENT_REPRESENTING_NAME: u32 = 93;
pub const PR_ORIGINAL_SENT_REPRESENTING_ENTRYID: u32 = 94;
pub const PR_ORIGINAL_SENT_REPRESENTING_SEARCH_KEY: u32 = 95;
pub const PR_START_DATE: u32 = 96;
pub const PR_END_DATE: u32 = 97;
pub const PR_OWNER_APPT_ID: u32 = 98;
pub const PR_RESPONSE_REQUESTED: u32 = 99;
pub const PR_SENT_REPRESENTING_ADDRTYPE: u32 = 100;
pub const PR_SENT_REPRESENTING_EMAIL_ADDRESS: u32 = 101;
pub const PR_ORIGINAL_SENDER_ADDRTYPE: u32 = 102;
pub const PR_ORIGINAL_SENDER_EMAIL_ADDRESS: u32 = 103;
pub const PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE: u32 = 104;
pub const PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS: u32 = 105;
pub const PR_CONVERSATION_TOPIC: u32 = 112;
pub const PR_CONVERSATION_INDEX: u32 = 113;
pub const PR_ORIGINAL_DISPLAY_BCC: u32 = 114;
pub const PR_ORIGINAL_DISPLAY_CC: u32 = 115;
pub const PR_ORIGINAL_DISPLAY_TO: u32 = 116;
pub const PR_RECEIVED_BY_ADDRTYPE: u32 = 117;
pub const PR_RECEIVED_BY_EMAIL_ADDRESS: u32 = 118;
pub const PR_RCVD_REPRESENTING_ADDRTYPE: u32 = 119;
pub const PR_RCVD_REPRESENTING_EMAIL_ADDRESS: u32 = 120;
pub const PR_ORIGINAL_AUTHOR_ADDRTYPE: u32 = 121;
pub const PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS: u32 = 122;
pub const PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE: u32 = 123;
pub const PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS: u32 = 124;
pub const PR_TRANSPORT_MESSAGE_HEADERS: u32 = 125;
pub const PR_DELEGATION: u32 = 126;
pub const PR_TNEF_CORRELATION_KEY: u32 = 127;
pub const PR_CONTENT_INTEGRITY_CHECK: u32 = 3072;
pub const PR_EXPLICIT_CONVERSION: u32 = 3073;
pub const PR_IPM_RETURN_REQUESTED: u32 = 3074;
pub const PR_MESSAGE_TOKEN: u32 = 3075;
pub const PR_NDR_REASON_CODE: u32 = 3076;
pub const PR_NDR_DIAG_CODE: u32 = 3077;
pub const PR_NON_RECEIPT_NOTIFICATION_REQUESTED: u32 = 3078;
pub const PR_DELIVERY_POINT: u32 = 3079;
pub const PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED: u32 = 3080;
pub const PR_ORIGINATOR_REQUESTED_ALTERNATE_RECIPIENT: u32 = 3081;
pub const PR_PHYSICAL_DELIVERY_BUREAU_FAX_DELIVERY: u32 = 3082;
pub const PR_PHYSICAL_DELIVERY_MODE: u32 = 3083;
pub const PR_PHYSICAL_DELIVERY_REPORT_REQUEST: u32 = 3084;
pub const PR_PHYSICAL_FORWARDING_ADDRESS: u32 = 3085;
pub const PR_PHYSICAL_FORWARDING_ADDRESS_REQUESTED: u32 = 3086;
pub const PR_PHYSICAL_FORWARDING_PROHIBITED: u32 = 3087;
pub const PR_PHYSICAL_RENDITION_ATTRIBUTES: u32 = 3088;
pub const PR_PROOF_OF_DELIVERY: u32 = 3089;
pub const PR_PROOF_OF_DELIVERY_REQUESTED: u32 = 3090;
pub const PR_RECIPIENT_CERTIFICATE: u32 = 3091;
pub const PR_RECIPIENT_NUMBER_FOR_ADVICE: u32 = 3092;
pub const PR_RECIPIENT_TYPE: u32 = 3093;
pub const PR_REGISTERED_MAIL_TYPE: u32 = 3094;
pub const PR_REPLY_REQUESTED: u32 = 3095;
pub const PR_REQUESTED_DELIVERY_METHOD: u32 = 3096;
pub const PR_SENDER_ENTRYID: u32 = 3097;
pub const PR_SENDER_NAME: u32 = 3098;
pub const PR_SUPPLEMENTARY_INFO: u32 = 3099;
pub const PR_TYPE_OF_MTS_USER: u32 = 3100;
pub const PR_SENDER_SEARCH_KEY: u32 = 3101;
pub const PR_SENDER_ADDRTYPE: u32 = 3102;
pub const PR_SENDER_EMAIL_ADDRESS: u32 = 3103;
pub const PR_CURRENT_VERSION: u32 = 3584;
pub const PR_DELETE_AFTER_SUBMIT: u32 = 3585;
pub const PR_DISPLAY_BCC: u32 = 3586;
pub const PR_DISPLAY_CC: u32 = 3587;
pub const PR_DISPLAY_TO: u32 = 3588;
pub const PR_PARENT_DISPLAY: u32 = 3589;
pub const PR_MESSAGE_DELIVERY_TIME: u32 = 3590;
pub const PR_MESSAGE_FLAGS: u32 = 3591;
pub const PR_MESSAGE_SIZE: u32 = 3592;
pub const PR_PARENT_ENTRYID: u32 = 3593;
pub const PR_SENTMAIL_ENTRYID: u32 = 3594;
pub const PR_CORRELATE: u32 = 3596;
pub const PR_CORRELATE_MTSID: u32 = 3597;
pub const PR_DISCRETE_VALUES: u32 = 3598;
pub const PR_RESPONSIBILITY: u32 = 3599;
pub const PR_SPOOLER_STATUS: u32 = 3600;
pub const PR_TRANSPORT_STATUS: u32 = 3601;
pub const PR_MESSAGE_RECIPIENTS: u32 = 3602;
pub const PR_MESSAGE_ATTACHMENTS: u32 = 3603;
pub const PR_SUBMIT_FLAGS: u32 = 3604;
pub const PR_RECIPIENT_STATUS: u32 = 3605;
pub const PR_TRANSPORT_KEY: u32 = 3606;
pub const PR_MSG_STATUS: u32 = 3607;
pub const PR_MESSAGE_DOWNLOAD_TIME: u32 = 3608;
pub const PR_CREATION_VERSION: u32 = 3609;
pub const PR_MODIFY_VERSION: u32 = 3610;
pub const PR_HASATTACH: u32 = 3611;
pub const PR_BODY_CRC: u32 = 3612;
pub const PR_NORMALIZED_SUBJECT: u32 = 3613;
pub const PR_RTF_IN_SYNC: u32 = 3615;
pub const PR_ATTACH_SIZE: u32 = 3616;
pub const PR_ATTACH_NUM: u32 = 3617;
pub const PR_PREPROCESS: u32 = 3618;
pub const PR_ORIGINATING_MTA_CERTIFICATE: u32 = 3621;
pub const PR_PROOF_OF_SUBMISSION: u32 = 3622;
pub const PR_ENTRYID: u32 = 4095;
pub const PR_OBJECT_TYPE: u32 = 4094;
pub const PR_ICON: u32 = 4093;
pub const PR_MINI_ICON: u32 = 4092;
pub const PR_STORE_ENTRYID: u32 = 4091;
pub const PR_STORE_RECORD_KEY: u32 = 4090;
pub const PR_RECORD_KEY: u32 = 4089;
pub const PR_MAPPING_SIGNATURE: u32 = 4088;
pub const PR_ACCESS_LEVEL: u32 = 4087;
pub const PR_INSTANCE_KEY: u32 = 4086;
pub const PR_ROW_TYPE: u32 = 4085;
pub const PR_ACCESS: u32 = 4084;
pub const PR_BODY: u32 = 4096;
pub const PR_REPORT_TEXT: u32 = 4097;
pub const PR_ORIGINATOR_AND_DL_EXPANSION_HISTORY: u32 = 4098;
pub const PR_REPORTING_DL_NAME: u32 = 4099;
pub const PR_REPORTING_MTA_CERTIFICATE: u32 = 4100;
pub const PR_RTF_SYNC_BODY_CRC: u32 = 4102;
pub const PR_RTF_SYNC_BODY_COUNT: u32 = 4103;
pub const PR_RTF_SYNC_BODY_TAG: u32 = 4104;
pub const PR_RTF_COMPRESSED: u32 = 4105;
pub const PR_RTF_SYNC_PREFIX_COUNT: u32 = 4112;
pub const PR_RTF_SYNC_TRAILING_COUNT: u32 = 4113;
pub const PR_ORIGINALLY_INTENDED_RECIP_ENTRYID: u32 = 4114;
pub const PR_BODY_HTML: u32 = 4115;
pub const PR_INTERNET_MESSAGE_ID: u32 = 4149;
pub const PR_ICON_INDEX: u32 = 4224;
pub const PR_ROWID: u32 = 12288;
pub const PR_DISPLAY_NAME: u32 = 12289;
pub const PR_ADDRTYPE: u32 = 12290;
pub const PR_EMAIL_ADDRESS: u32 = 12291;
pub const PR_COMMENT: u32 = 12292;
pub const PR_DEPTH: u32 = 12293;
pub const PR_PROVIDER_DISPLAY: u32 = 12294;
pub const PR_CREATION_TIME: u32 = 12295;
pub const PR_LAST_MODIFICATION_TIME: u32 = 12296;
pub const PR_RESOURCE_FLAGS: u32 = 12297;
pub const PR_PROVIDER_DLL_NAME: u32 = 12298;
pub const PR_SEARCH_KEY: u32 = 12299;
pub const PR_PROVIDER_UID: u32 = 12300;
pub const PR_PROVIDER_ORDINAL: u32 = 12301;
pub const PR_FORM_VERSION: u32 = 13057;
pub const PR_FORM_CLSID: u32 = 13058;
pub const PR_FORM_CONTACT_NAME: u32 = 13059;
pub const PR_FORM_CATEGORY: u32 = 13060;
pub const PR_FORM_CATEGORY_SUB: u32 = 13061;
pub const PR_FORM_HOST_MAP: u32 = 13062;
pub const PR_FORM_HIDDEN: u32 = 13063;
pub const PR_FORM_DESIGNER_NAME: u32 = 13064;
pub const PR_FORM_DESIGNER_GUID: u32 = 13065;
pub const PR_FORM_MESSAGE_BEHAVIOR: u32 = 13066;
pub const PR_DEFAULT_STORE: u32 = 13312;
pub const PR_STORE_SUPPORT_MASK: u32 = 13325;
pub const PR_STORE_STATE: u32 = 13326;
pub const PR_IPM_SUBTREE_SEARCH_KEY: u32 = 13328;
pub const PR_IPM_OUTBOX_SEARCH_KEY: u32 = 13329;
pub const PR_IPM_WASTEBASKET_SEARCH_KEY: u32 = 13330;
pub const PR_IPM_SENTMAIL_SEARCH_KEY: u32 = 13331;
pub const PR_MDB_PROVIDER: u32 = 13332;
pub const PR_RECEIVE_FOLDER_SETTINGS: u32 = 13333;
pub const PR_VALID_FOLDER_MASK: u32 = 13791;
pub const PR_IPM_SUBTREE_ENTRYID: u32 = 13792;
pub const PR_IPM_OUTBOX_ENTRYID: u32 = 13794;
pub const PR_IPM_WASTEBASKET_ENTRYID: u32 = 13795;
pub const PR_IPM_SENTMAIL_ENTRYID: u32 = 13796;
pub const PR_VIEWS_ENTRYID: u32 = 13797;
pub const PR_COMMON_VIEWS_ENTRYID: u32 = 13798;
pub const PR_FINDER_ENTRYID: u32 = 13799;
pub const PR_CONTAINER_FLAGS: u32 = 13824;
pub const PR_FOLDER_TYPE: u32 = 13825;
pub const PR_CONTENT_COUNT: u32 = 13826;
pub const PR_CONTENT_UNREAD: u32 = 13827;
pub const PR_CREATE_TEMPLATES: u32 = 13828;
pub const PR_DETAILS_TABLE: u32 = 13829;
pub const PR_SEARCH: u32 = 13831;
pub const PR_SELECTABLE: u32 = 13833;
pub const PR_SUBFOLDERS: u32 = 13834;
pub const PR_STATUS: u32 = 13835;
pub const PR_ANR: u32 = 13836;
pub const PR_CONTENTS_SORT_ORDER: u32 = 13837;
pub const PR_CONTAINER_HIERARCHY: u32 = 13838;
pub const PR_CONTAINER_CONTENTS: u32 = 13839;
pub const PR_FOLDER_ASSOCIATED_CONTENTS: u32 = 13840;
pub const PR_DEF_CREATE_DL: u32 = 13841;
pub const PR_DEF_CREATE_MAILUSER: u32 = 13842;
pub const PR_CONTAINER_CLASS: u32 = 13843;
pub const PR_CONTAINER_MODIFY_VERSION: u32 = 13844;
pub const PR_AB_PROVIDER_ID: u32 = 13845;
pub const PR_DEFAULT_VIEW_ENTRYID: u32 = 13846;
pub const PR_ASSOC_CONTENT_COUNT: u32 = 13847;
pub const PR_ATTACHMENT_X400_PARAMETERS: u32 = 14080;
pub const PR_ATTACH_DATA_OBJ: u32 = 14081;
pub const PR_ATTACH_ENCODING: u32 = 14082;
pub const PR_ATTACH_EXTENSION: u32 = 14083;
pub const PR_ATTACH_FILENAME: u32 = 14084;
pub const PR_ATTACH_METHOD: u32 = 14085;
pub const PR_ATTACH_LONG_FILENAME: u32 = 14087;
pub const PR_ATTACH_PATHNAME: u32 = 14088;
pub const PR_ATTACH_RENDERING: u32 = 14089;
pub const PR_ATTACH_TAG: u32 = 14090;
pub const PR_RENDERING_POSITION: u32 = 14091;
pub const PR_ATTACH_TRANSPORT_NAME: u32 = 14092;
pub const PR_ATTACH_LONG_PATHNAME: u32 = 14093;
pub const PR_ATTACH_MIME_TAG: u32 = 14094;
pub const PR_ATTACH_ADDITIONAL_INFO: u32 = 14095;
pub const PR_DISPLAY_TYPE: u32 = 14592;
pub const PR_TEMPLATEID: u32 = 14594;
pub const PR_PRIMARY_CAPABILITY: u32 = 14596;
pub const PR_7BIT_DISPLAY_NAME: u32 = 14847;
pub const PR_ACCOUNT: u32 = 14848;
pub const PR_ALTERNATE_RECIPIENT: u32 = 14849;
pub const PR_CALLBACK_TELEPHONE_NUMBER: u32 = 14850;
pub const PR_CONVERSION_PROHIBITED: u32 = 14851;
pub const PR_DISCLOSE_RECIPIENTS: u32 = 14852;
pub const PR_GENERATION: u32 = 14853;
pub const PR_GIVEN_NAME: u32 = 14854;
pub const PR_GOVERNMENT_ID_NUMBER: u32 = 14855;
pub const PR_BUSINESS_TELEPHONE_NUMBER: u32 = 14856;
pub const PR_HOME_TELEPHONE_NUMBER: u32 = 14857;
pub const PR_INITIALS: u32 = 14858;
pub const PR_KEYWORD: u32 = 14859;
pub const PR_LANGUAGE: u32 = 14860;
pub const PR_LOCATION: u32 = 14861;
pub const PR_MAIL_PERMISSION: u32 = 14862;
pub const PR_MHS_COMMON_NAME: u32 = 14863;
pub const PR_ORGANIZATIONAL_ID_NUMBER: u32 = 14864;
pub const PR_SURNAME: u32 = 14865;
pub const PR_ORIGINAL_ENTRYID: u32 = 14866;
pub const PR_ORIGINAL_DISPLAY_NAME: u32 = 14867;
pub const PR_ORIGINAL_SEARCH_KEY: u32 = 14868;
pub const PR_POSTAL_ADDRESS: u32 = 14869;
pub const PR_COMPANY_NAME: u32 = 14870;
pub const PR_TITLE: u32 = 14871;
pub const PR_DEPARTMENT_NAME: u32 = 14872;
pub const PR_OFFICE_LOCATION: u32 = 14873;
pub const PR_PRIMARY_TELEPHONE_NUMBER: u32 = 14874;
pub const PR_BUSINESS2_TELEPHONE_NUMBER: u32 = 14875;
pub const PR_MOBILE_TELEPHONE_NUMBER: u32 = 14876;
pub const PR_RADIO_TELEPHONE_NUMBER: u32 = 14877;
pub const PR_CAR_TELEPHONE_NUMBER: u32 = 14878;
pub const PR_OTHER_TELEPHONE_NUMBER: u32 = 14879;
pub const PR_TRANSMITABLE_DISPLAY_NAME: u32 = 14880;
pub const PR_PAGER_TELEPHONE_NUMBER: u32 = 14881;
pub const PR_USER_CERTIFICATE: u32 = 14882;
pub const PR_PRIMARY_FAX_NUMBER: u32 = 14883;
pub const PR_BUSINESS_FAX_NUMBER: u32 = 14884;
pub const PR_HOME_FAX_NUMBER: u32 = 14885;
pub const PR_COUNTRY: u32 = 14886;
pub const PR_LOCALITY: u32 = 14887;
pub const PR_STATE_OR_PROVINCE: u32 = 14888;
pub const PR_STREET_ADDRESS: u32 = 14889;
pub const PR_POSTAL_CODE: u32 = 14890;
pub const PR_POST_OFFICE_BOX: u32 = 14891;
pub const PR_TELEX_NUMBER: u32 = 14892;
pub const PR_ISDN_NUMBER: u32 = 14893;
pub const PR_ASSISTANT_TELEPHONE_NUMBER: u32 = 14894;
pub const PR_HOME2_TELEPHONE_NUMBER: u32 = 14895;
pub const PR_ASSISTANT: u32 = 14896;
pub const PR_SEND_RICH_INFO: u32 = 14912;
pub const PR_WEDDING_ANNIVERSARY: u32 = 14913;
pub const PR_BIRTHDAY: u32 = 14914;
pub const PR_HOBBIES: u32 = 14915;
pub const PR_MIDDLE_NAME: u32 = 14916;
pub const PR_DISPLAY_NAME_PREFIX: u32 = 14917;
pub const PR_PROFESSION: u32 = 14918;
pub const PR_PREFERRED_BY_NAME: u32 = 14919;
pub const PR_SPOUSE_NAME: u32 = 14920;
pub const PR_COMPUTER_NETWORK_NAME: u32 = 14921;
pub const PR_CUSTOMER_ID: u32 = 14922;
pub const PR_TTYTDD_PHONE_NUMBER: u32 = 14923;
pub const PR_FTP_SITE: u32 = 14924;
pub const PR_GENDER: u32 = 14925;
pub const PR_MANAGER_NAME: u32 = 14926;
pub const PR_NICKNAME: u32 = 14927;
pub const PR_PERSONAL_HOME_PAGE: u32 = 14928;
pub const PR_BUSINESS_HOME_PAGE: u32 = 14929;
pub const PR_CONTACT_VERSION: u32 = 14930;
pub const PR_CONTACT_ENTRYIDS: u32 = 14931;
pub const PR_CONTACT_ADDRTYPES: u32 = 14932;
pub const PR_CONTACT_DEFAULT_ADDRESS_INDEX: u32 = 14933;
pub const PR_CONTACT_EMAIL_ADDRESSES: u32 = 14934;
pub const PR_COMPANY_MAIN_PHONE_NUMBER: u32 = 14935;
pub const PR_CHILDRENS_NAMES: u32 = 14936;
pub const PR_HOME_ADDRESS_CITY: u32 = 14937;
pub const PR_HOME_ADDRESS_COUNTRY: u32 = 14938;
pub const PR_HOME_ADDRESS_POSTAL_CODE: u32 = 14939;
pub const PR_HOME_ADDRESS_STATE_OR_PROVINCE: u32 = 14940;
pub const PR_HOME_ADDRESS_STREET: u32 = 14941;
pub const PR_HOME_ADDRESS_POST_OFFICE_BOX: u32 = 14942;
pub const PR_OTHER_ADDRESS_CITY: u32 = 14943;
pub const PR_OTHER_ADDRESS_COUNTRY: u32 = 14944;
pub const PR_OTHER_ADDRESS_POSTAL_CODE: u32 = 14945;
pub const PR_OTHER_ADDRESS_STATE_OR_PROVINCE: u32 = 14946;
pub const PR_OTHER_ADDRESS_STREET: u32 = 14947;
pub const PR_OTHER_ADDRESS_POST_OFFICE_BOX: u32 = 14948;
pub const PR_STORE_PROVIDERS: u32 = 15616;
pub const PR_AB_PROVIDERS: u32 = 15617;
pub const PR_TRANSPORT_PROVIDERS: u32 = 15618;
pub const PR_DEFAULT_PROFILE: u32 = 15620;
pub const PR_AB_SEARCH_PATH: u32 = 15621;
pub const PR_AB_DEFAULT_DIR: u32 = 15622;
pub const PR_AB_DEFAULT_PAB: u32 = 15623;
pub const PR_FILTERING_HOOKS: u32 = 15624;
pub const PR_SERVICE_NAME: u32 = 15625;
pub const PR_SERVICE_DLL_NAME: u32 = 15626;
pub const PR_SERVICE_ENTRY_NAME: u32 = 15627;
pub const PR_SERVICE_UID: u32 = 15628;
pub const PR_SERVICE_EXTRA_UIDS: u32 = 15629;
pub const PR_SERVICES: u32 = 15630;
pub const PR_SERVICE_SUPPORT_FILES: u32 = 15631;
pub const PR_SERVICE_DELETE_FILES: u32 = 15632;
pub const PR_AB_SEARCH_PATH_UPDATE: u32 = 15633;
pub const PR_PROFILE_NAME: u32 = 15634;
pub const PR_IDENTITY_DISPLAY: u32 = 15872;
pub const PR_IDENTITY_ENTRYID: u32 = 15873;
pub const PR_RESOURCE_METHODS: u32 = 15874;
pub const PR_RESOURCE_TYPE: u32 = 15875;
pub const PR_STATUS_CODE: u32 = 15876;
pub const PR_IDENTITY_SEARCH_KEY: u32 = 15877;
pub const PR_OWN_STORE_ENTRYID: u32 = 15878;
pub const PR_RESOURCE_PATH: u32 = 15879;
pub const PR_STATUS_STRING: u32 = 15880;
pub const PR_X400_DEFERRED_DELIVERY_CANCEL: u32 = 15881;
pub const PR_HEADER_FOLDER_ENTRYID: u32 = 15882;
pub const PR_REMOTE_PROGRESS: u32 = 15883;
pub const PR_REMOTE_PROGRESS_TEXT: u32 = 15884;
pub const PR_REMOTE_VALIDATE_OK: u32 = 15885;
pub const PR_CONTROL_FLAGS: u32 = 16128;
pub const PR_CONTROL_STRUCTURE: u32 = 16129;
pub const PR_CONTROL_TYPE: u32 = 16130;
pub const PR_DELTAX: u32 = 16131;
pub const PR_DELTAY: u32 = 16132;
pub const PR_XPOS: u32 = 16133;
pub const PR_YPOS: u32 = 16134;
pub const PR_CONTROL_ID: u32 = 16135;
pub const PR_INITIAL_DETAILS_PANE: u32 = 16136;
pub const PR_INTERNET_CPID: u32 = 16350;
pub const PR_MESSAGE_LOCALE_ID: u32 = 16369;
pub const PR_CREATOR_NAME: u32 = 16376;
pub const PR_CREATOR_ENTRYID: u32 = 16377;
pub const PR_LAST_MODIFIER_NAME: u32 = 16378;
pub const PR_MESSAGE_CODEPAGE: u32 = 16381;
pub const PR_INETMAIL_OVERRIDE_FORMAT: u32 = 22786;
pub const PR_MSG_EDITOR_FORMAT: u32 = 22793;
pub const PR_SENDER_SMTP_ADDRESS: u32 = 23809;
pub const PR_SENT_REPRESENTING_SMTP_ADDRESS: u32 = 23810;
pub const PROP_ID_SECURE_MIN: u32 = 26608;
pub const PROP_ID_SECURE_MAX: u32 = 26623;
pub const YTNEF_CANNOT_INIT_DATA: i32 = -1;
pub const YTNEF_NOT_TNEF_STREAM: i32 = -2;
pub const YTNEF_ERROR_READING_DATA: i32 = -3;
pub const YTNEF_NO_KEY: i32 = -4;
pub const YTNEF_BAD_CHECKSUM: i32 = -5;
pub const YTNEF_ERROR_IN_HANDLER: i32 = -6;
pub const YTNEF_UNKNOWN_PROPERTY: i32 = -7;
pub const YTNEF_INCORRECT_SETUP: i32 = -8;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MAPIPropertyTagList {
    pub id: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_MAPIPropertyTagList() {
    assert_eq!(
        ::std::mem::size_of::<MAPIPropertyTagList>(),
        132usize,
        concat!("Size of: ", stringify!(MAPIPropertyTagList))
    );
    assert_eq!(
        ::std::mem::align_of::<MAPIPropertyTagList>(),
        4usize,
        concat!("Alignment of ", stringify!(MAPIPropertyTagList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIPropertyTagList>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIPropertyTagList),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIPropertyTagList>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIPropertyTagList),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub static mut MPList: [MAPIPropertyTagList; 432usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct renddata {
    pub atyp: ::std::os::raw::c_ushort,
    pub ulPosition: ::std::os::raw::c_uint,
    pub dxWidth: ::std::os::raw::c_ushort,
    pub dyHeight: ::std::os::raw::c_ushort,
    pub dwFlags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_renddata() {
    assert_eq!(
        ::std::mem::size_of::<renddata>(),
        16usize,
        concat!("Size of: ", stringify!(renddata))
    );
    assert_eq!(
        ::std::mem::align_of::<renddata>(),
        4usize,
        concat!("Alignment of ", stringify!(renddata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<renddata>())).atyp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(atyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<renddata>())).ulPosition as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(ulPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<renddata>())).dxWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(dxWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<renddata>())).dyHeight as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(dyHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<renddata>())).dwFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(renddata),
            "::",
            stringify!(dwFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtr {
    pub wYear: ::std::os::raw::c_ushort,
    pub wMonth: ::std::os::raw::c_ushort,
    pub wDay: ::std::os::raw::c_ushort,
    pub wHour: ::std::os::raw::c_ushort,
    pub wMinute: ::std::os::raw::c_ushort,
    pub wSecond: ::std::os::raw::c_ushort,
    pub wDayOfWeek: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_dtr() {
    assert_eq!(
        ::std::mem::size_of::<dtr>(),
        14usize,
        concat!("Size of: ", stringify!(dtr))
    );
    assert_eq!(
        ::std::mem::align_of::<dtr>(),
        2usize,
        concat!("Alignment of ", stringify!(dtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dtr>())).wYear as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wYear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dtr>())).wMonth as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wMonth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dtr>())).wDay as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(dtr), "::", stringify!(wDay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dtr>())).wHour as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wHour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dtr>())).wMinute as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wMinute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dtr>())).wSecond as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wSecond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dtr>())).wDayOfWeek as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dtr),
            "::",
            stringify!(wDayOfWeek)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct variableLength {
    pub data: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_variableLength() {
    assert_eq!(
        ::std::mem::size_of::<variableLength>(),
        16usize,
        concat!("Size of: ", stringify!(variableLength))
    );
    assert_eq!(
        ::std::mem::align_of::<variableLength>(),
        8usize,
        concat!("Alignment of ", stringify!(variableLength))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variableLength>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(variableLength),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<variableLength>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(variableLength),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MAPIProperty {
    pub custom: ::std::os::raw::c_uint,
    pub guid: [::std::os::raw::c_uchar; 16usize],
    pub id: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub namedproperty: ::std::os::raw::c_int,
    pub propnames: *mut variableLength,
    pub data: *mut variableLength,
}
#[test]
fn bindgen_test_layout_MAPIProperty() {
    assert_eq!(
        ::std::mem::size_of::<MAPIProperty>(),
        48usize,
        concat!("Size of: ", stringify!(MAPIProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<MAPIProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(MAPIProperty))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProperty>())).custom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProperty>())).guid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProperty>())).id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProperty>())).count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProperty>())).namedproperty as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(namedproperty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProperty>())).propnames as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(propnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProperty>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProperty),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MAPIProps {
    pub count: ::std::os::raw::c_uint,
    pub properties: *mut MAPIProperty,
}
#[test]
fn bindgen_test_layout_MAPIProps() {
    assert_eq!(
        ::std::mem::size_of::<MAPIProps>(),
        16usize,
        concat!("Size of: ", stringify!(MAPIProps))
    );
    assert_eq!(
        ::std::mem::align_of::<MAPIProps>(),
        8usize,
        concat!("Alignment of ", stringify!(MAPIProps))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProps>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProps),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MAPIProps>())).properties as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MAPIProps),
            "::",
            stringify!(properties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Attachment {
    pub Date: dtr,
    pub Title: variableLength,
    pub MetaFile: variableLength,
    pub CreateDate: dtr,
    pub ModifyDate: dtr,
    pub TransportFilename: variableLength,
    pub RenderData: renddata,
    pub MAPI: MAPIProps,
    pub next: *mut Attachment,
    pub FileData: variableLength,
    pub IconData: variableLength,
}
#[test]
fn bindgen_test_layout_Attachment() {
    assert_eq!(
        ::std::mem::size_of::<Attachment>(),
        168usize,
        concat!("Size of: ", stringify!(Attachment))
    );
    assert_eq!(
        ::std::mem::align_of::<Attachment>(),
        8usize,
        concat!("Alignment of ", stringify!(Attachment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).Date as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(Date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).Title as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(Title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).MetaFile as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(MetaFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).CreateDate as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(CreateDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).ModifyDate as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(ModifyDate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).TransportFilename as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(TransportFilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).RenderData as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(RenderData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).MAPI as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(MAPI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).next as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).FileData as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(FileData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Attachment>())).IconData as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Attachment),
            "::",
            stringify!(IconData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TNEFIOStruct {
    pub InitProc: ::std::option::Option<
        unsafe extern "C" fn(IO: *mut _TNEFIOStruct) -> ::std::os::raw::c_int,
    >,
    pub ReadProc: ::std::option::Option<
        unsafe extern "C" fn(
            IO: *mut _TNEFIOStruct,
            size: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            dest: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub CloseProc: ::std::option::Option<
        unsafe extern "C" fn(IO: *mut _TNEFIOStruct) -> ::std::os::raw::c_int,
    >,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__TNEFIOStruct() {
    assert_eq!(
        ::std::mem::size_of::<_TNEFIOStruct>(),
        32usize,
        concat!("Size of: ", stringify!(_TNEFIOStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<_TNEFIOStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(_TNEFIOStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TNEFIOStruct>())).InitProc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(InitProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TNEFIOStruct>())).ReadProc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(ReadProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TNEFIOStruct>())).CloseProc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(CloseProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TNEFIOStruct>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TNEFIOStruct),
            "::",
            stringify!(data)
        )
    );
}
pub type TNEFIOStruct = _TNEFIOStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TNEFFileInfo {
    pub filename: *mut ::std::os::raw::c_char,
    pub fptr: *mut FILE,
    pub Debug: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TNEFFileInfo() {
    assert_eq!(
        ::std::mem::size_of::<TNEFFileInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TNEFFileInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFFileInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFFileInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFFileInfo>())).filename as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFFileInfo),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFFileInfo>())).fptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFFileInfo),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFFileInfo>())).Debug as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFFileInfo),
            "::",
            stringify!(Debug)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TNEFMemInfo {
    pub dataStart: *mut ::std::os::raw::c_uchar,
    pub ptr: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_long,
    pub Debug: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TNEFMemInfo() {
    assert_eq!(
        ::std::mem::size_of::<TNEFMemInfo>(),
        32usize,
        concat!("Size of: ", stringify!(TNEFMemInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFMemInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFMemInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFMemInfo>())).dataStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(dataStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFMemInfo>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFMemInfo>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFMemInfo>())).Debug as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFMemInfo),
            "::",
            stringify!(Debug)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TNEFStruct {
    pub version: [::std::os::raw::c_char; 16usize],
    pub from: variableLength,
    pub subject: variableLength,
    pub dateSent: dtr,
    pub dateReceived: dtr,
    pub messageStatus: [::std::os::raw::c_char; 10usize],
    pub messageClass: [::std::os::raw::c_char; 50usize],
    pub messageID: [::std::os::raw::c_char; 50usize],
    pub parentID: [::std::os::raw::c_char; 50usize],
    pub conversationID: [::std::os::raw::c_char; 50usize],
    pub body: variableLength,
    pub priority: [::std::os::raw::c_char; 10usize],
    pub starting_attach: Attachment,
    pub dateModified: dtr,
    pub MapiProperties: MAPIProps,
    pub CodePage: variableLength,
    pub OriginalMessageClass: variableLength,
    pub Owner: variableLength,
    pub SentFor: variableLength,
    pub Delegate: variableLength,
    pub DateStart: dtr,
    pub DateEnd: dtr,
    pub AidOwner: variableLength,
    pub RequestRes: ::std::os::raw::c_int,
    pub Debug: ::std::os::raw::c_int,
    pub IO: TNEFIOStruct,
}
#[test]
fn bindgen_test_layout_TNEFStruct() {
    assert_eq!(
        ::std::mem::size_of::<TNEFStruct>(),
        688usize,
        concat!("Size of: ", stringify!(TNEFStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).from as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).subject as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).dateSent as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(dateSent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).dateReceived as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(dateReceived)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).messageStatus as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(messageStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).messageClass as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(messageClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).messageID as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(messageID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).parentID as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(parentID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).conversationID as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(conversationID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).body as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).priority as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).starting_attach as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(starting_attach)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).dateModified as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(dateModified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).MapiProperties as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(MapiProperties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).CodePage as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(CodePage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).OriginalMessageClass as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(OriginalMessageClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).Owner as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(Owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).SentFor as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(SentFor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).Delegate as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(Delegate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).DateStart as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(DateStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).DateEnd as *const _ as usize },
        614usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(DateEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).AidOwner as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(AidOwner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).RequestRes as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(RequestRes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).Debug as *const _ as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(Debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFStruct>())).IO as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFStruct),
            "::",
            stringify!(IO)
        )
    );
}
extern "C" {
    pub fn SwapDWord(
        p: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SwapWord(
        p: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn TNEFInitMapi(p: *mut MAPIProps);
}
extern "C" {
    pub fn TNEFInitAttachment(p: *mut Attachment);
}
extern "C" {
    pub fn TNEFInitialize(TNEF: *mut TNEFStruct);
}
extern "C" {
    pub fn TNEFFree(TNEF: *mut TNEFStruct);
}
extern "C" {
    pub fn TNEFFreeAttachment(p: *mut Attachment);
}
extern "C" {
    pub fn TNEFFreeMapiProps(p: *mut MAPIProps);
}
extern "C" {
    pub fn TNEFCheckForSignature(sig: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TNEFParseMemory(
        memory: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_long,
        TNEF: *mut TNEFStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TNEFParseFile(
        filename: *mut ::std::os::raw::c_char,
        TNEF: *mut TNEFStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TNEFParse(TNEF: *mut TNEFStruct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MAPIFindUserProp(p: *mut MAPIProps, ID: ::std::os::raw::c_uint) -> *mut variableLength;
}
extern "C" {
    pub fn MAPIFindProperty(p: *mut MAPIProps, ID: ::std::os::raw::c_uint) -> *mut variableLength;
}
extern "C" {
    pub fn MAPISysTimetoDTR(
        data: *mut ::std::os::raw::c_uchar,
        thedate: *mut dtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MAPIPrint(p: *mut MAPIProps);
}
extern "C" {
    pub fn TNEFPrintDate(Date: dtr);
}
extern "C" {
    pub fn to_utf8(len: usize, buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SwapDDWord(
        p: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn DecompressRTF(
        p: *mut variableLength,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TNEFHandler {
    pub id: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 40usize],
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(
            TNEF: *mut TNEFStruct,
            id: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_TNEFHandler() {
    assert_eq!(
        ::std::mem::size_of::<TNEFHandler>(),
        56usize,
        concat!("Size of: ", stringify!(TNEFHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<TNEFHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(TNEFHandler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFHandler>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFHandler),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFHandler>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFHandler),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TNEFHandler>())).handler as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TNEFHandler),
            "::",
            stringify!(handler)
        )
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
